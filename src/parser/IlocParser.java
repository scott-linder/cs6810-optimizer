/* Generated By:JavaCC: Do not edit this line. IlocParser.java */
package parser;

import java.util.*;
import iloc.*;

public class IlocParser implements IlocParserConstants {

  final public IlocProgram program() throws ParseException {
        Vector<IlocInstruction> program;
        DataSection dataSection = new DataSection(new Vector<IlocInstruction>());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATA:
    case FRAME:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATA:
        dataSection = data();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      program = procedures();
      break;
    case ADD:
    case ADDI:
    case AND:
    case C2C:
    case C2I:
    case CALL:
    case CBR:
    case CBRNE:
    case CBR_LT:
    case CBR_LE:
    case CBR_EQ:
    case CBR_NE:
    case CBR_GT:
    case CBR_GE:
    case CLOADAI:
    case CLOADAO:
    case CLOAD:
    case CMP_LT:
    case CMP_LE:
    case CMP_EQ:
    case CMP_NE:
    case CMP_GT:
    case CMP_GE:
    case COMP:
    case CREAD:
    case CSTOREAI:
    case CSTOREAO:
    case CSTORE:
    case CWRITE:
    case DIVI:
    case DIV:
    case F2F:
    case F2I:
    case FADD:
    case FCALL:
    case FCOMP:
    case FDIV:
    case FLOADAI:
    case FLOADAO:
    case FLOAD:
    case FMULT:
    case FREAD:
    case FRET:
    case FWRITE:
    case FSTOREAI:
    case FSTOREAO:
    case FSTORE:
    case FSUB:
    case I2F:
    case I2I:
    case ICALL:
    case IREAD:
    case IRET:
    case IWRITE:
    case JUMPI:
    case JUMP:
    case LOADAI:
    case LOADAO:
    case LOAD:
    case LOADI:
    case LSHIFTI:
    case LSHIFT:
    case MOD:
    case MULTI:
    case MULT:
    case NOP:
    case NOT:
    case OR:
    case RSHIFTI:
    case RSHIFT:
    case RET:
    case STOREAI:
    case STOREAO:
    case STORE:
    case SUBI:
    case SUB:
    case SWRITE:
    case TBL:
    case TESTEQ:
    case TESTGE:
    case TESTGT:
    case TESTLE:
    case TESTLT:
    case TESTNE:
    case LBRACKET:
    case LABEL:
      program = listOfIlocInstructions();
                                // if there is no frame pseudo op, create one for a
                                // main program with no stack and no parameters 

                                FramePseudoOp frameOp = new FramePseudoOp("main",0,
                                        new Vector<VirtualRegisterOperand>());
                frameOp.setSourceLine(1);
                                program.insertElementAt(frameOp,0);
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        {if (true) return new IlocProgram(dataSection,program);}
    throw new Error("Missing return statement in function");
  }

  final public DataSection data() throws ParseException {
        Vector<IlocInstruction> pseudoOps = new Vector<IlocInstruction>();
        IlocInstruction dataOp = null;
    jj_consume_token(DATA);
    label_1:
    while (true) {
      dataOp = pseudoOp();
                                        pseudoOps.add(dataOp);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLOAT:
      case GLOBAL:
      case STRING:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(TEXT);
                {if (true) return new DataSection(pseudoOps);}
    throw new Error("Missing return statement in function");
  }

  final public Vector<IlocInstruction> procedures() throws ParseException {
        Vector<IlocInstruction> proc;
        Vector<IlocInstruction> program = new Vector<IlocInstruction>();
    label_2:
    while (true) {
      proc = procedure();
            program.addAll(proc);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FRAME:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
                {if (true) return program;}
    throw new Error("Missing return statement in function");
  }

  final public Vector<IlocInstruction> procedure() throws ParseException {
        IlocInstruction inst;
        Vector<IlocInstruction> proc = new Vector<IlocInstruction>();
    inst = frameInstruction();
    proc = listOfIlocInstructions();
                proc.insertElementAt(inst,0);
                {if (true) return proc;}
    throw new Error("Missing return statement in function");
  }

  final public Vector<IlocInstruction> listOfIlocInstructions() throws ParseException {
        IlocInstruction inst;
        Vector<IlocInstruction> instList = new Vector<IlocInstruction>();
        Vector<IlocInstruction> operList;
        Token name = null;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LABEL:
        name = jj_consume_token(LABEL);
        jj_consume_token(COLON);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case ADDI:
      case AND:
      case C2C:
      case C2I:
      case CALL:
      case CBR:
      case CBRNE:
      case CBR_LT:
      case CBR_LE:
      case CBR_EQ:
      case CBR_NE:
      case CBR_GT:
      case CBR_GE:
      case CLOADAI:
      case CLOADAO:
      case CLOAD:
      case CMP_LT:
      case CMP_LE:
      case CMP_EQ:
      case CMP_NE:
      case CMP_GT:
      case CMP_GE:
      case COMP:
      case CREAD:
      case CSTOREAI:
      case CSTOREAO:
      case CSTORE:
      case CWRITE:
      case DIVI:
      case DIV:
      case F2F:
      case F2I:
      case FADD:
      case FCALL:
      case FCOMP:
      case FDIV:
      case FLOADAI:
      case FLOADAO:
      case FLOAD:
      case FMULT:
      case FREAD:
      case FRET:
      case FWRITE:
      case FSTOREAI:
      case FSTOREAO:
      case FSTORE:
      case FSUB:
      case I2F:
      case I2I:
      case ICALL:
      case IREAD:
      case IRET:
      case IWRITE:
      case JUMPI:
      case JUMP:
      case LOADAI:
      case LOADAO:
      case LOAD:
      case LOADI:
      case LSHIFTI:
      case LSHIFT:
      case MOD:
      case MULTI:
      case MULT:
      case NOP:
      case NOT:
      case OR:
      case RSHIFTI:
      case RSHIFT:
      case RET:
      case STOREAI:
      case STOREAO:
      case STORE:
      case SUBI:
      case SUB:
      case SWRITE:
      case TBL:
      case TESTEQ:
      case TESTGE:
      case TESTGT:
      case TESTLE:
      case TESTLT:
      case TESTNE:
        inst = operation();
                                if (name != null) {
                                        inst.setLabel(name.image);
                                        name = null;
                                }
                        instList.add(inst);
        break;
      case LBRACKET:
        jj_consume_token(LBRACKET);
        operList = operationList();
        jj_consume_token(RBRACKET);
                                        if (name != null) {
                                        for (int i = 0; i < operList.size(); i++)
                                                operList.elementAt(i).setLabel(name.image);
                                        name = null;
                                        }
                                instList.addAll(operList);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case ADDI:
      case AND:
      case C2C:
      case C2I:
      case CALL:
      case CBR:
      case CBRNE:
      case CBR_LT:
      case CBR_LE:
      case CBR_EQ:
      case CBR_NE:
      case CBR_GT:
      case CBR_GE:
      case CLOADAI:
      case CLOADAO:
      case CLOAD:
      case CMP_LT:
      case CMP_LE:
      case CMP_EQ:
      case CMP_NE:
      case CMP_GT:
      case CMP_GE:
      case COMP:
      case CREAD:
      case CSTOREAI:
      case CSTOREAO:
      case CSTORE:
      case CWRITE:
      case DIVI:
      case DIV:
      case F2F:
      case F2I:
      case FADD:
      case FCALL:
      case FCOMP:
      case FDIV:
      case FLOADAI:
      case FLOADAO:
      case FLOAD:
      case FMULT:
      case FREAD:
      case FRET:
      case FWRITE:
      case FSTOREAI:
      case FSTOREAO:
      case FSTORE:
      case FSUB:
      case I2F:
      case I2I:
      case ICALL:
      case IREAD:
      case IRET:
      case IWRITE:
      case JUMPI:
      case JUMP:
      case LOADAI:
      case LOADAO:
      case LOAD:
      case LOADI:
      case LSHIFTI:
      case LSHIFT:
      case MOD:
      case MULTI:
      case MULT:
      case NOP:
      case NOT:
      case OR:
      case RSHIFTI:
      case RSHIFT:
      case RET:
      case STOREAI:
      case STOREAO:
      case STORE:
      case SUBI:
      case SUB:
      case SWRITE:
      case TBL:
      case TESTEQ:
      case TESTGE:
      case TESTGT:
      case TESTLE:
      case TESTLT:
      case TESTNE:
      case LBRACKET:
      case LABEL:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
    }
                {if (true) return instList;}
    throw new Error("Missing return statement in function");
  }

  final public FramePseudoOp frameInstruction() throws ParseException {
        Vector<VirtualRegisterOperand> vRegs = new Vector<VirtualRegisterOperand>();
        VirtualRegisterOperand vr;
        Token routineName,stackSize;
        FramePseudoOp frameOp;
    jj_consume_token(FRAME);
    routineName = jj_consume_token(LABEL);
    jj_consume_token(COMMA);
    stackSize = jj_consume_token(NUMBER);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      vr = virtualReg();
                vRegs.add(vr);
    }
                frameOp = new FramePseudoOp(routineName.image,
                                        Integer.parseInt(stackSize.image),
                                        vRegs);
            frameOp.setSourceLine(routineName.beginLine);
            {if (true) return frameOp;}
    throw new Error("Missing return statement in function");
  }

  final public Vector<IlocInstruction> operationList() throws ParseException {
        Token name;
        IlocInstruction inst;
        Vector<IlocInstruction> operList = new Vector<IlocInstruction>();
    inst = operation();
            operList.add(inst);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      jj_consume_token(SEMICOLON);
      inst = operation();
                    operList.add(inst);
    }
                {if (true) return operList;}
    throw new Error("Missing return statement in function");
  }

  final public IlocInstruction operation() throws ParseException {
        VirtualRegisterOperand vr1,vr2,vr3;
        Vector<VirtualRegisterOperand> vRegs = new Vector<VirtualRegisterOperand>();
        ImmediateOperand constVal;
        Token num, label, label1, opc;
        IlocInstruction inst;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
      opc = jj_consume_token(ADD);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new AddInstruction(vr1,vr2,vr3);
      break;
    case ADDI:
      opc = jj_consume_token(ADDI);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      num = jj_consume_token(NUMBER);
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new AddIInstruction(vr1,
                        new ConstantOperand(Integer.parseInt(num.image)),
                        vr3);
      break;
    case AND:
      opc = jj_consume_token(AND);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new AndInstruction(vr1,vr2,vr3);
      break;
    case C2C:
      opc = jj_consume_token(C2C);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new C2cInstruction(vr1,vr3);
      break;
    case C2I:
      opc = jj_consume_token(C2I);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new C2iInstruction(vr1,vr3);
      break;
    case CALL:
      opc = jj_consume_token(CALL);
      label = jj_consume_token(LABEL);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        vr1 = virtualReg();
                vRegs.add(vr1);
      }
            inst = new CallInstruction(new LabelOperand(label.image),vRegs);
      break;
    case CBR:
      opc = jj_consume_token(CBR);
      vr1 = virtualReg();
      jj_consume_token(ARROW);
      label = jj_consume_token(LABEL);
            inst = new CbrInstruction(vr1,new LabelOperand(label.image));
      break;
    case CBRNE:
      opc = jj_consume_token(CBRNE);
      vr1 = virtualReg();
      jj_consume_token(ARROW);
      label = jj_consume_token(LABEL);
            inst = new CbrneInstruction(vr1,new LabelOperand(label.image));
      break;
    case CBR_LT:
      opc = jj_consume_token(CBR_LT);
      vr1 = virtualReg();
      jj_consume_token(ARROW);
      label = jj_consume_token(LABEL);
      jj_consume_token(COMMA);
      label1 = jj_consume_token(LABEL);
            inst = new Cbr_ltInstruction(vr1,new LabelOperand(label.image),
                                                                 new LabelOperand(label1.image));
      break;
    case CBR_LE:
      opc = jj_consume_token(CBR_LE);
      vr1 = virtualReg();
      jj_consume_token(ARROW);
      label = jj_consume_token(LABEL);
      jj_consume_token(COMMA);
      label1 = jj_consume_token(LABEL);
            inst = new Cbr_leInstruction(vr1,new LabelOperand(label.image),
                                                                 new LabelOperand(label1.image));
      break;
    case CBR_EQ:
      opc = jj_consume_token(CBR_EQ);
      vr1 = virtualReg();
      jj_consume_token(ARROW);
      label = jj_consume_token(LABEL);
      jj_consume_token(COMMA);
      label1 = jj_consume_token(LABEL);
            inst = new Cbr_eqInstruction(vr1,new LabelOperand(label.image),
                                                                 new LabelOperand(label1.image));
      break;
    case CBR_NE:
      opc = jj_consume_token(CBR_NE);
      vr1 = virtualReg();
      jj_consume_token(ARROW);
      label = jj_consume_token(LABEL);
      jj_consume_token(COMMA);
      label1 = jj_consume_token(LABEL);
            inst = new Cbr_neInstruction(vr1,new LabelOperand(label.image),
                                                                 new LabelOperand(label1.image));
      break;
    case CBR_GT:
      opc = jj_consume_token(CBR_GT);
      vr1 = virtualReg();
      jj_consume_token(ARROW);
      label = jj_consume_token(LABEL);
      jj_consume_token(COMMA);
      label1 = jj_consume_token(LABEL);
            inst = new Cbr_gtInstruction(vr1,new LabelOperand(label.image),
                                                                 new LabelOperand(label1.image));
      break;
    case CBR_GE:
      opc = jj_consume_token(CBR_GE);
      vr1 = virtualReg();
      jj_consume_token(ARROW);
      label = jj_consume_token(LABEL);
      jj_consume_token(COMMA);
      label1 = jj_consume_token(LABEL);
            inst = new Cbr_geInstruction(vr1,new LabelOperand(label.image),
                                                                 new LabelOperand(label1.image));
      break;
    case CLOADAI:
      opc = jj_consume_token(CLOADAI);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      num = jj_consume_token(NUMBER);
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new CloadAIInstruction(vr1,
                        new ConstantOperand(Integer.parseInt(num.image)),
                        vr3);
      break;
    case CLOADAO:
      opc = jj_consume_token(CLOADAO);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new CloadAOInstruction(vr1,vr2,vr3);
      break;
    case CLOAD:
      opc = jj_consume_token(CLOAD);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new CloadInstruction(vr1,vr3);
      break;
    case CMP_LT:
      opc = jj_consume_token(CMP_LT);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new Cmp_ltInstruction(vr1,vr2,vr3);
      break;
    case CMP_LE:
      opc = jj_consume_token(CMP_LE);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new Cmp_leInstruction(vr1,vr2,vr3);
      break;
    case CMP_EQ:
      opc = jj_consume_token(CMP_EQ);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new Cmp_eqInstruction(vr1,vr2,vr3);
      break;
    case CMP_NE:
      opc = jj_consume_token(CMP_NE);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new Cmp_neInstruction(vr1,vr2,vr3);
      break;
    case CMP_GT:
      opc = jj_consume_token(CMP_GT);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new Cmp_gtInstruction(vr1,vr2,vr3);
      break;
    case CMP_GE:
      opc = jj_consume_token(CMP_GE);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new Cmp_geInstruction(vr1,vr2,vr3);
      break;
    case COMP:
      opc = jj_consume_token(COMP);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new CompInstruction(vr1,vr2,vr3);
      break;
    case CREAD:
      opc = jj_consume_token(CREAD);
      vr1 = virtualReg();
            inst = new CreadInstruction(vr1);
      break;
    case CSTOREAI:
      opc = jj_consume_token(CSTOREAI);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
      jj_consume_token(COMMA);
      num = jj_consume_token(NUMBER);
            inst = new CstoreAIInstruction(vr1,
                        new ConstantOperand(Integer.parseInt(num.image)),
                        vr3);
      break;
    case CSTOREAO:
      opc = jj_consume_token(CSTOREAO);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr2 = virtualReg();
      jj_consume_token(COMMA);
      vr3 = virtualReg();
            inst = new CstoreAOInstruction(vr1,vr2,vr3);
      break;
    case CSTORE:
      opc = jj_consume_token(CSTORE);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new CstoreInstruction(vr1,vr3);
      break;
    case CWRITE:
      opc = jj_consume_token(CWRITE);
      vr1 = virtualReg();
            inst = new CwriteInstruction(vr1);
      break;
    case DIVI:
      opc = jj_consume_token(DIVI);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      num = jj_consume_token(NUMBER);
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new DivIInstruction(vr1,
                        new ConstantOperand(Integer.parseInt(num.image)),
                        vr3);
      break;
    case DIV:
      opc = jj_consume_token(DIV);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new DivInstruction(vr1,vr2,vr3);
      break;
    case F2F:
      opc = jj_consume_token(F2F);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new F2fInstruction(vr1,vr3);
      break;
    case F2I:
      opc = jj_consume_token(F2I);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new F2iInstruction(vr1,vr3);
      break;
    case FADD:
      opc = jj_consume_token(FADD);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new FaddInstruction(vr1,vr2,vr3);
      break;
    case FCALL:
      opc = jj_consume_token(FCALL);
      label = jj_consume_token(LABEL);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        vr1 = virtualReg();
                vRegs.add(vr1);
      }
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new FcallInstruction(new LabelOperand(label.image),vRegs,vr3);
      break;
    case FCOMP:
      opc = jj_consume_token(FCOMP);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new FcompInstruction(vr1,vr2,vr3);
      break;
    case FDIV:
      opc = jj_consume_token(FDIV);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new FdivInstruction(vr1,vr2,vr3);
      break;
    case FLOADAI:
      opc = jj_consume_token(FLOADAI);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      num = jj_consume_token(NUMBER);
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new FloadAIInstruction(vr1,
                        new ConstantOperand(Integer.parseInt(num.image)),
                        vr3);
      break;
    case FLOADAO:
      opc = jj_consume_token(FLOADAO);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new FloadAOInstruction(vr1,vr2,vr3);
      break;
    case FLOAD:
      opc = jj_consume_token(FLOAD);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new FloadInstruction(vr1,vr3);
      break;
    case FMULT:
      opc = jj_consume_token(FMULT);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new FmultInstruction(vr1,vr2,vr3);
      break;
    case FREAD:
      opc = jj_consume_token(FREAD);
      vr1 = virtualReg();
            inst = new FreadInstruction(vr1);
      break;
    case FRET:
      opc = jj_consume_token(FRET);
      vr1 = virtualReg();
            inst = new FretInstruction(vr1);
      break;
    case FWRITE:
      opc = jj_consume_token(FWRITE);
      vr1 = virtualReg();
            inst = new FwriteInstruction(vr1);
      break;
    case FSTOREAI:
      opc = jj_consume_token(FSTOREAI);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
      jj_consume_token(COMMA);
      num = jj_consume_token(NUMBER);
            inst = new FstoreAIInstruction(vr1,
                        new ConstantOperand(Integer.parseInt(num.image)),
                        vr3);
      break;
    case FSTOREAO:
      opc = jj_consume_token(FSTOREAO);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr2 = virtualReg();
      jj_consume_token(COMMA);
      vr3 = virtualReg();
            inst = new FstoreAOInstruction(vr1,vr2,vr3);
      break;
    case FSTORE:
      opc = jj_consume_token(FSTORE);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new FstoreInstruction(vr1,vr3);
      break;
    case FSUB:
      opc = jj_consume_token(FSUB);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new FsubInstruction(vr1,vr2,vr3);
      break;
    case I2F:
      opc = jj_consume_token(I2F);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new I2fInstruction(vr1,vr3);
      break;
    case I2I:
      opc = jj_consume_token(I2I);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new I2iInstruction(vr1,vr3);
      break;
    case ICALL:
      opc = jj_consume_token(ICALL);
      label = jj_consume_token(LABEL);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        vr1 = virtualReg();
                vRegs.add(vr1);
      }
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new IcallInstruction(new LabelOperand(label.image),vRegs,vr3);
      break;
    case IREAD:
      opc = jj_consume_token(IREAD);
      vr1 = virtualReg();
            inst = new IreadInstruction(vr1);
      break;
    case IRET:
      opc = jj_consume_token(IRET);
      vr1 = virtualReg();
            inst = new IretInstruction(vr1);
      break;
    case IWRITE:
      opc = jj_consume_token(IWRITE);
      vr1 = virtualReg();
            inst = new IwriteInstruction(vr1);
      break;
    case JUMPI:
      opc = jj_consume_token(JUMPI);
      jj_consume_token(ARROW);
      label = jj_consume_token(LABEL);
            inst = new JumpIInstruction(new LabelOperand(label.image));
      break;
    case JUMP:
      opc = jj_consume_token(JUMP);
      jj_consume_token(ARROW);
      vr1 = virtualReg();
            inst = new JumpInstruction(vr1);
      break;
    case LOADAI:
      opc = jj_consume_token(LOADAI);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      num = jj_consume_token(NUMBER);
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new LoadAIInstruction(vr1,
                        new ConstantOperand(Integer.parseInt(num.image)),
                        vr3);
      break;
    case LOADAO:
      opc = jj_consume_token(LOADAO);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new LoadAOInstruction(vr1,vr2,vr3);
      break;
    case LOAD:
      opc = jj_consume_token(LOAD);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new LoadInstruction(vr1,vr3);
      break;
    case LOADI:
      opc = jj_consume_token(LOADI);
      constVal = immediateVal();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new LoadIInstruction(constVal,vr3);
      break;
    case LSHIFTI:
      opc = jj_consume_token(LSHIFTI);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      num = jj_consume_token(NUMBER);
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new LshiftIInstruction(vr1,
                        new ConstantOperand(Integer.parseInt(num.image)),
                        vr3);
      break;
    case LSHIFT:
      opc = jj_consume_token(LSHIFT);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new LshiftInstruction(vr1,vr2,vr3);
      break;
    case MOD:
      opc = jj_consume_token(MOD);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new ModInstruction(vr1,vr2,vr3);
      break;
    case MULTI:
      opc = jj_consume_token(MULTI);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      num = jj_consume_token(NUMBER);
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new MultIInstruction(vr1,
                        new ConstantOperand(Integer.parseInt(num.image)),
                        vr3);
      break;
    case MULT:
      opc = jj_consume_token(MULT);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new MultInstruction(vr1,vr2,vr3);
      break;
    case NOP:
      opc = jj_consume_token(NOP);
            inst = new NopInstruction();
      break;
    case NOT:
      opc = jj_consume_token(NOT);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new NotInstruction(vr1,vr3);
      break;
    case OR:
      opc = jj_consume_token(OR);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new OrInstruction(vr1,vr2,vr3);
      break;
    case RSHIFTI:
      opc = jj_consume_token(RSHIFTI);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      num = jj_consume_token(NUMBER);
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new RshiftIInstruction(vr1,
                        new ConstantOperand(Integer.parseInt(num.image)),
                        vr3);
      break;
    case RSHIFT:
      opc = jj_consume_token(RSHIFT);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new RshiftInstruction(vr1,vr2,vr3);
      break;
    case RET:
      opc = jj_consume_token(RET);
            inst = new RetInstruction();
      break;
    case STOREAI:
      opc = jj_consume_token(STOREAI);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
      jj_consume_token(COMMA);
      num = jj_consume_token(NUMBER);
            inst = new StoreAIInstruction(vr1,
                        new ConstantOperand(Integer.parseInt(num.image)),
                        vr3);
      break;
    case STOREAO:
      opc = jj_consume_token(STOREAO);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr2 = virtualReg();
      jj_consume_token(COMMA);
      vr3 = virtualReg();
            inst = new StoreAOInstruction(vr1,vr2,vr3);
      break;
    case STORE:
      opc = jj_consume_token(STORE);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new StoreInstruction(vr1,vr3);
      break;
    case SUBI:
      opc = jj_consume_token(SUBI);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      num = jj_consume_token(NUMBER);
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new SubIInstruction(vr1,
                        new ConstantOperand(Integer.parseInt(num.image)),
                        vr3);
      break;
    case SUB:
      opc = jj_consume_token(SUB);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      vr2 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new SubInstruction(vr1,vr2,vr3);
      break;
    case SWRITE:
      opc = jj_consume_token(SWRITE);
      vr1 = virtualReg();
            inst = new SwriteInstruction(vr1);
      break;
    case TBL:
      opc = jj_consume_token(TBL);
      vr1 = virtualReg();
      jj_consume_token(COMMA);
      label = jj_consume_token(LABEL);
                inst = new TblInstruction(vr1,new LabelOperand(label.image));
      break;
    case TESTEQ:
      opc = jj_consume_token(TESTEQ);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new TesteqInstruction(vr1,vr3);
      break;
    case TESTGE:
      opc = jj_consume_token(TESTGE);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new TestgeInstruction(vr1,vr3);
      break;
    case TESTGT:
      opc = jj_consume_token(TESTGT);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new TestgtInstruction(vr1,vr3);
      break;
    case TESTLE:
      opc = jj_consume_token(TESTLE);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new TestleInstruction(vr1,vr3);
      break;
    case TESTLT:
      opc = jj_consume_token(TESTLT);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new TestltInstruction(vr1,vr3);
      break;
    case TESTNE:
      opc = jj_consume_token(TESTNE);
      vr1 = virtualReg();
      jj_consume_token(ASSIGN);
      vr3 = virtualReg();
            inst = new TestneInstruction(vr1,vr3);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                        inst.setSourceLine(opc.beginLine);
                        {if (true) return inst;}
    throw new Error("Missing return statement in function");
  }

  final public IlocInstruction pseudoOp() throws ParseException {
        Token label,str,num,num1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
      label = jj_consume_token(LABEL);
      jj_consume_token(COMMA);
      str = jj_consume_token(STRING_CONST);
          {if (true) return new StringPseudoOp(label.image,
                      str.image.substring(1,str.image.length()-1));}
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      label = jj_consume_token(LABEL);
      jj_consume_token(COMMA);
      num = jj_consume_token(FLOAT_CONST);
          {if (true) return new FloatPseudoOp(label.image,Float.parseFloat(num.image));}
      break;
    case GLOBAL:
      jj_consume_token(GLOBAL);
      label = jj_consume_token(LABEL);
      jj_consume_token(COMMA);
      num = jj_consume_token(NUMBER);
      jj_consume_token(COMMA);
      num1 = jj_consume_token(NUMBER);
           {if (true) return new GlobalPseudoOp(label.image,
                        Integer.parseInt(num.image),
                        Integer.parseInt(num1.image));}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public VirtualRegisterOperand virtualReg() throws ParseException {
        Token vr;
    vr = jj_consume_token(VR);
             int vrNum = Integer.parseInt(vr.image.substring(3));
             IlocProgram.setMaxVirtualReg(vrNum);
             {if (true) return new VirtualRegisterOperand(vrNum);}
    throw new Error("Missing return statement in function");
  }

  final public ImmediateOperand immediateVal() throws ParseException {
        Token label,num;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LABEL:
      label = jj_consume_token(LABEL);
              {if (true) return new LabelOperand(label.image);}
      break;
    case NUMBER:
      num = jj_consume_token(NUMBER);
              {if (true) return new ConstantOperand(Integer.valueOf(num.image));}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public IlocParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0xffffffe0,0x0,0x0,0x0,0xffffffe0,0xffffffe0,0x0,0x0,0x0,0x0,0x0,0xffffffe0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0xfeffbfff,0x1004000,0x10000,0x0,0xfefebffb,0xfefebffb,0x0,0x0,0x0,0x0,0x0,0xfefebffb,0x1004000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x3ff7ffff,0x80000,0x0,0x0,0x3ff7ffff,0x3ff7ffff,0x0,0x0,0x0,0x0,0x0,0x3ff7ffff,0x80000,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x108,0x0,0x0,0x100,0x8,0x108,0x20,0x4,0x20,0x20,0x20,0x0,0x0,0x8100,};
   }

  /** Constructor with InputStream. */
  public IlocParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public IlocParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new IlocParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public IlocParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new IlocParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public IlocParser(IlocParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(IlocParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[113];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 113; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
