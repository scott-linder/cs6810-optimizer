/* Generated By:JavaCC: Do not edit this line. IlocParserTokenManager.java */
package parser;

import java.util.*;
import iloc.*;

/** Token Manager. */
public class IlocParserTokenManager implements IlocParserConstants {

	/** Debug output. */
	public static java.io.PrintStream debugStream = System.out;

	/** Set debug output. */
	public static void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
		switch (pos) {
		case 0:
			if ((active1 & 0x100000000L) != 0L)
				return 23;
			if ((active0 & 0x101400400000000L) != 0L || (active1 & 0x40080000L) != 0L)
				return 11;
			if ((active0 & 0xfefebffbffffffe0L) != 0L || (active1 & 0x3ff7ffffL) != 0L) {
				jjmatchedKind = 104;
				return 12;
			}
			return -1;
		case 1:
			if ((active0 & 0xffffffffffffffe0L) != 0L || (active1 & 0x7fffefffL) != 0L) {
				jjmatchedKind = 104;
				jjmatchedPos = 1;
				return 12;
			}
			if ((active1 & 0x1000L) != 0L)
				return 12;
			return -1;
		case 2:
			if ((active0 & 0x60000780007fbe0L) != 0L || (active1 & 0xb08c80L) != 0L)
				return 12;
			if ((active0 & 0xf9ffff87fff80400L) != 0L || (active1 & 0x7f4f637fL) != 0L) {
				if (jjmatchedPos != 2) {
					jjmatchedKind = 104;
					jjmatchedPos = 2;
				}
				return 12;
			}
			return -1;
		case 3:
			if ((active0 & 0xa084048810000440L) != 0L || (active1 & 0x10031fL) != 0L)
				return 12;
			if ((active0 & 0x597bfb07effff000L) != 0L || (active1 & 0x7f4f6060L) != 0L) {
				if (jjmatchedPos != 3) {
					jjmatchedKind = 104;
					jjmatchedPos = 3;
				}
				return 12;
			}
			return -1;
		case 4:
			if ((active0 & 0x9802bb0420381000L) != 0L || (active1 & 0x40070110L) != 0L)
				return 12;
			if ((active0 & 0x41794003cfc7e000L) != 0L || (active1 & 0x3f486066L) != 0L) {
				if (jjmatchedPos != 4) {
					jjmatchedKind = 104;
					jjmatchedPos = 4;
				}
				return 12;
			}
			return -1;
		case 5:
			if ((active0 & 0x40794003cfc7e000L) != 0L || (active1 & 0x3f406066L) != 0L)
				return 12;
			if ((active0 & 0x100180000180000L) != 0L || (active1 & 0xb0000L) != 0L) {
				if (jjmatchedPos != 5) {
					jjmatchedKind = 104;
					jjmatchedPos = 5;
				}
				return 12;
			}
			return -1;
		case 6:
			if ((active0 & 0x100180000180000L) != 0L || (active1 & 0xb2020L) != 0L)
				return 12;
			if ((active0 & 0x300000c0000000L) != 0L) {
				jjmatchedKind = 104;
				jjmatchedPos = 6;
				return 12;
			}
			return -1;
		default:
			return -1;
		}
	}

	private static final int jjStartNfa_0(int pos, long active0, long active1) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
	}

	static private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	static private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 44:
			return jjStopAtPos(0, 101);
		case 45:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
		case 46:
			return jjMoveStringLiteralDfa1_0(0x101400400000000L, 0x40080000L);
		case 58:
			return jjStopAtPos(0, 97);
		case 59:
			return jjStopAtPos(0, 98);
		case 61:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
		case 91:
			return jjStopAtPos(0, 99);
		case 93:
			return jjStopAtPos(0, 100);
		case 97:
			return jjMoveStringLiteralDfa1_0(0xe0L, 0x0L);
		case 99:
			return jjMoveStringLiteralDfa1_0(0x3ffffff00L, 0x0L);
		case 100:
			return jjMoveStringLiteralDfa1_0(0x1800000000L, 0x0L);
		case 102:
			return jjMoveStringLiteralDfa1_0(0xfebfe000000000L, 0x0L);
		case 105:
			return jjMoveStringLiteralDfa1_0(0x7e00000000000000L, 0x0L);
		case 106:
			return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1L);
		case 108:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x7eL);
		case 109:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x380L);
		case 110:
			return jjMoveStringLiteralDfa1_0(0x0L, 0xc00L);
		case 111:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x1000L);
		case 114:
			return jjMoveStringLiteralDfa1_0(0x0L, 0xe000L);
		case 115:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x770000L);
		case 116:
			return jjMoveStringLiteralDfa1_0(0x0L, 0x3f800000L);
		default:
			return jjMoveNfa_0(6, 0);
		}
	}

	static private int jjMoveStringLiteralDfa1_0(long active0, long active1) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0, active1);
			return 1;
		}
		switch (curChar) {
		case 50:
			return jjMoveStringLiteralDfa2_0(active0, 0x600006000000300L, active1, 0L);
		case 62:
			if ((active1 & 0x80000000L) != 0L)
				return jjStopAtPos(1, 95);
			else if ((active1 & 0x100000000L) != 0L)
				return jjStopAtPos(1, 96);
			break;
		case 97:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000400L, active1, 0L);
		case 98:
			return jjMoveStringLiteralDfa2_0(active0, 0x7f800L, active1, 0x800000L);
		case 99:
			return jjMoveStringLiteralDfa2_0(active0, 0x800030000000000L, active1, 0L);
		case 100:
			return jjMoveStringLiteralDfa2_0(active0, 0x40400000060L, active1, 0L);
		case 101:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3f008000L);
		case 102:
			return jjMoveStringLiteralDfa2_0(active0, 0x1400000000000L, active1, 0L);
		case 103:
			return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
		case 105:
			return jjMoveStringLiteralDfa2_0(active0, 0x1800000000L, active1, 0L);
		case 108:
			return jjMoveStringLiteralDfa2_0(active0, 0x380000380000L, active1, 0L);
		case 109:
			return jjMoveStringLiteralDfa2_0(active0, 0x80000fc00000L, active1, 0L);
		case 110:
			return jjMoveStringLiteralDfa2_0(active0, 0x80L, active1, 0L);
		case 111:
			return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0xc9eL);
		case 114:
			if ((active1 & 0x1000L) != 0L)
				return jjStartNfaWithStates_0(1, 76, 12);
			return jjMoveStringLiteralDfa2_0(active0, 0x3006000020000000L, active1, 0L);
		case 115:
			return jjMoveStringLiteralDfa2_0(active0, 0xf00001c0000000L, active1, 0x86060L);
		case 116:
			return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40070000L);
		case 117:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x300301L);
		case 119:
			return jjMoveStringLiteralDfa2_0(active0, 0x4008000200000000L, active1, 0x400000L);
		default:
			break;
		}
		return jjStartNfa_0(0, active0, active1);
	}

	static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(0, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0, active1);
			return 2;
		}
		switch (curChar) {
		case 97:
			return jjMoveStringLiteralDfa3_0(active0, 0x800010400000000L, active1, 0x1eL);
		case 98:
			if ((active1 & 0x200000L) != 0L) {
				jjmatchedKind = 85;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000L);
		case 99:
			if ((active0 & 0x100L) != 0L)
				return jjStartNfaWithStates_0(2, 8, 12);
			break;
		case 100:
			if ((active0 & 0x20L) != 0L) {
				jjmatchedKind = 5;
				jjmatchedPos = 2;
			} else if ((active0 & 0x80L) != 0L)
				return jjStartNfaWithStates_0(2, 7, 12);
			else if ((active1 & 0x80L) != 0L)
				return jjStartNfaWithStates_0(2, 71, 12);
			return jjMoveStringLiteralDfa3_0(active0, 0x8000000040L, active1, 0L);
		case 101:
			return jjMoveStringLiteralDfa3_0(active0, 0x3006000020000000L, active1, 0x40000000L);
		case 102:
			if ((active0 & 0x2000000000L) != 0L)
				return jjStartNfaWithStates_0(2, 37, 12);
			else if ((active0 & 0x200000000000000L) != 0L)
				return jjStartNfaWithStates_0(2, 57, 12);
			break;
		case 104:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6060L);
		case 105:
			if ((active0 & 0x200L) != 0L)
				return jjStartNfaWithStates_0(2, 9, 12);
			else if ((active0 & 0x4000000000L) != 0L)
				return jjStartNfaWithStates_0(2, 38, 12);
			else if ((active0 & 0x400000000000000L) != 0L)
				return jjStartNfaWithStates_0(2, 58, 12);
			return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
		case 108:
			if ((active1 & 0x800000L) != 0L)
				return jjStartNfaWithStates_0(2, 87, 12);
			return jjMoveStringLiteralDfa3_0(active0, 0x100400000000400L, active1, 0x300L);
		case 109:
			return jjMoveStringLiteralDfa3_0(active0, 0x8000000010000000L, active1, 0x1L);
		case 111:
			return jjMoveStringLiteralDfa3_0(active0, 0x3a0000380000L, active1, 0x70000L);
		case 112:
			if ((active1 & 0x400L) != 0L)
				return jjStartNfaWithStates_0(2, 74, 12);
			return jjMoveStringLiteralDfa3_0(active0, 0xfc00000L, active1, 0L);
		case 114:
			if ((active0 & 0x800L) != 0L) {
				jjmatchedKind = 11;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x400900020007f000L, active1, 0x400000L);
		case 115:
			return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3f000000L);
		case 116:
			if ((active1 & 0x800L) != 0L)
				return jjStartNfaWithStates_0(2, 75, 12);
			else if ((active1 & 0x8000L) != 0L)
				return jjStartNfaWithStates_0(2, 79, 12);
			return jjMoveStringLiteralDfa3_0(active0, 0x700001c0000000L, active1, 0x80000L);
		case 117:
			return jjMoveStringLiteralDfa3_0(active0, 0x80800000000000L, active1, 0L);
		case 118:
			if ((active0 & 0x1000000000L) != 0L) {
				jjmatchedKind = 36;
				jjmatchedPos = 2;
			}
			return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
		default:
			break;
		}
		return jjStartNfa_0(1, active0, active1);
	}

	static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(1, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0, active1);
			return 3;
		}
		switch (curChar) {
		case 73:
			if ((active0 & 0x40L) != 0L)
				return jjStartNfaWithStates_0(3, 6, 12);
			else if ((active0 & 0x800000000L) != 0L)
				return jjStartNfaWithStates_0(3, 35, 12);
			else if ((active1 & 0x100000L) != 0L)
				return jjStartNfaWithStates_0(3, 84, 12);
			break;
		case 95:
			return jjMoveStringLiteralDfa4_0(active0, 0xfc7e000L, active1, 0L);
		case 97:
			return jjMoveStringLiteralDfa4_0(active0, 0x1003380020380000L, active1, 0L);
		case 98:
			if ((active0 & 0x80000000000000L) != 0L)
				return jjStartNfaWithStates_0(3, 55, 12);
			break;
		case 100:
			if ((active0 & 0x8000000000L) != 0L)
				return jjStartNfaWithStates_0(3, 39, 12);
			else if ((active1 & 0x8L) != 0L) {
				jjmatchedKind = 67;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x16L);
		case 105:
			return jjMoveStringLiteralDfa4_0(active0, 0x4008000200000000L, active1, 0x406060L);
		case 108:
			if ((active0 & 0x400L) != 0L)
				return jjStartNfaWithStates_0(3, 10, 12);
			return jjMoveStringLiteralDfa4_0(active0, 0x800810000000000L, active1, 0L);
		case 109:
			return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
		case 110:
			return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
		case 111:
			return jjMoveStringLiteralDfa4_0(active0, 0x1704001c0000000L, active1, 0L);
		case 112:
			if ((active0 & 0x10000000L) != 0L)
				return jjStartNfaWithStates_0(3, 28, 12);
			else if ((active1 & 0x1L) != 0L) {
				jjmatchedKind = 64;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L);
		case 114:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xf0000L);
		case 116:
			if ((active0 & 0x4000000000000L) != 0L)
				return jjStartNfaWithStates_0(3, 50, 12);
			else if ((active0 & 0x2000000000000000L) != 0L)
				return jjStartNfaWithStates_0(3, 61, 12);
			else if ((active1 & 0x200L) != 0L) {
				jjmatchedKind = 73;
				jjmatchedPos = 3;
			}
			return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x3f000100L);
		case 118:
			if ((active0 & 0x40000000000L) != 0L)
				return jjStartNfaWithStates_0(3, 42, 12);
			break;
		case 120:
			return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000L);
		default:
			break;
		}
		return jjStartNfa_0(2, active0, active1);
	}

	static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(2, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0, active1);
			return 4;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6L);
		case 69:
			return jjMoveStringLiteralDfa5_0(active0, 0x1008000L, active1, 0L);
		case 71:
			return jjMoveStringLiteralDfa5_0(active0, 0xc060000L, active1, 0L);
		case 73:
			if ((active0 & 0x8000000000000000L) != 0L)
				return jjStartNfaWithStates_0(4, 63, 12);
			else if ((active1 & 0x10L) != 0L)
				return jjStartNfaWithStates_0(4, 68, 12);
			else if ((active1 & 0x100L) != 0L)
				return jjStartNfaWithStates_0(4, 72, 12);
			break;
		case 76:
			return jjMoveStringLiteralDfa5_0(active0, 0xc06000L, active1, 0L);
		case 78:
			return jjMoveStringLiteralDfa5_0(active0, 0x2010000L, active1, 0L);
		case 97:
			if ((active0 & 0x400000000L) != 0L)
				return jjStartNfaWithStates_0(4, 34, 12);
			return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
		case 98:
			return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0L);
		case 100:
			if ((active0 & 0x200000L) != 0L) {
				jjmatchedKind = 21;
				jjmatchedPos = 4;
			} else if ((active0 & 0x20000000L) != 0L)
				return jjStartNfaWithStates_0(4, 29, 12);
			else if ((active0 & 0x200000000000L) != 0L) {
				jjmatchedKind = 45;
				jjmatchedPos = 4;
			} else if ((active0 & 0x2000000000000L) != 0L)
				return jjStartNfaWithStates_0(4, 49, 12);
			else if ((active0 & 0x1000000000000000L) != 0L)
				return jjStartNfaWithStates_0(4, 60, 12);
			return jjMoveStringLiteralDfa5_0(active0, 0x180000180000L, active1, 0L);
		case 101:
			if ((active0 & 0x1000L) != 0L)
				return jjStartNfaWithStates_0(4, 12, 12);
			else if ((active1 & 0x40000L) != 0L) {
				jjmatchedKind = 82;
				jjmatchedPos = 4;
			}
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1030000L);
		case 102:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6060L);
		case 103:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x6000000L);
		case 105:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000L);
		case 108:
			if ((active0 & 0x10000000000L) != 0L)
				return jjStartNfaWithStates_0(4, 40, 12);
			else if ((active0 & 0x800000000000000L) != 0L)
				return jjStartNfaWithStates_0(4, 59, 12);
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x18000000L);
		case 109:
			return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
		case 110:
			return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000L);
		case 112:
			if ((active0 & 0x20000000000L) != 0L)
				return jjStartNfaWithStates_0(4, 41, 12);
			break;
		case 114:
			return jjMoveStringLiteralDfa5_0(active0, 0x700001c0000000L, active1, 0L);
		case 116:
			if ((active0 & 0x800000000000L) != 0L)
				return jjStartNfaWithStates_0(4, 47, 12);
			else if ((active1 & 0x40000000L) != 0L)
				return jjStartNfaWithStates_0(4, 94, 12);
			return jjMoveStringLiteralDfa5_0(active0, 0x4008000200000000L, active1, 0x400000L);
		default:
			break;
		}
		return jjStartNfa_0(3, active0, active1);
	}

	static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(3, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0, active1);
			return 5;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa6_0(active0, 0x180000180000L, active1, 0x30000L);
		case 69:
			if ((active0 & 0x4000L) != 0L)
				return jjStartNfaWithStates_0(5, 14, 12);
			else if ((active0 & 0x10000L) != 0L)
				return jjStartNfaWithStates_0(5, 16, 12);
			else if ((active0 & 0x40000L) != 0L)
				return jjStartNfaWithStates_0(5, 18, 12);
			else if ((active0 & 0x800000L) != 0L)
				return jjStartNfaWithStates_0(5, 23, 12);
			else if ((active0 & 0x2000000L) != 0L)
				return jjStartNfaWithStates_0(5, 25, 12);
			else if ((active0 & 0x8000000L) != 0L)
				return jjStartNfaWithStates_0(5, 27, 12);
			break;
		case 73:
			if ((active1 & 0x2L) != 0L)
				return jjStartNfaWithStates_0(5, 65, 12);
			break;
		case 79:
			if ((active1 & 0x4L) != 0L)
				return jjStartNfaWithStates_0(5, 66, 12);
			break;
		case 81:
			if ((active0 & 0x8000L) != 0L)
				return jjStartNfaWithStates_0(5, 15, 12);
			else if ((active0 & 0x1000000L) != 0L)
				return jjStartNfaWithStates_0(5, 24, 12);
			break;
		case 84:
			if ((active0 & 0x2000L) != 0L)
				return jjStartNfaWithStates_0(5, 13, 12);
			else if ((active0 & 0x20000L) != 0L)
				return jjStartNfaWithStates_0(5, 17, 12);
			else if ((active0 & 0x400000L) != 0L)
				return jjStartNfaWithStates_0(5, 22, 12);
			else if ((active0 & 0x4000000L) != 0L)
				return jjStartNfaWithStates_0(5, 26, 12);
			break;
		case 97:
			return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L);
		case 101:
			if ((active0 & 0x100000000L) != 0L) {
				jjmatchedKind = 32;
				jjmatchedPos = 5;
			} else if ((active0 & 0x200000000L) != 0L)
				return jjStartNfaWithStates_0(5, 33, 12);
			else if ((active0 & 0x1000000000000L) != 0L)
				return jjStartNfaWithStates_0(5, 48, 12);
			else if ((active0 & 0x8000000000000L) != 0L)
				return jjStartNfaWithStates_0(5, 51, 12);
			else if ((active0 & 0x40000000000000L) != 0L) {
				jjmatchedKind = 54;
				jjmatchedPos = 5;
			} else if ((active0 & 0x4000000000000000L) != 0L)
				return jjStartNfaWithStates_0(5, 62, 12);
			else if ((active1 & 0x400000L) != 0L)
				return jjStartNfaWithStates_0(5, 86, 12);
			else if ((active1 & 0x2000000L) != 0L)
				return jjStartNfaWithStates_0(5, 89, 12);
			else if ((active1 & 0x8000000L) != 0L)
				return jjStartNfaWithStates_0(5, 91, 12);
			else if ((active1 & 0x20000000L) != 0L)
				return jjStartNfaWithStates_0(5, 93, 12);
			return jjMoveStringLiteralDfa6_0(active0, 0x300000c0000000L, active1, 0L);
		case 110:
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L);
		case 113:
			if ((active1 & 0x1000000L) != 0L)
				return jjStartNfaWithStates_0(5, 88, 12);
			break;
		case 116:
			if ((active0 & 0x400000000000L) != 0L)
				return jjStartNfaWithStates_0(5, 46, 12);
			else if ((active1 & 0x40L) != 0L) {
				jjmatchedKind = 70;
				jjmatchedPos = 5;
			} else if ((active1 & 0x4000L) != 0L) {
				jjmatchedKind = 78;
				jjmatchedPos = 5;
			} else if ((active1 & 0x4000000L) != 0L)
				return jjStartNfaWithStates_0(5, 90, 12);
			else if ((active1 & 0x10000000L) != 0L)
				return jjStartNfaWithStates_0(5, 92, 12);
			return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2020L);
		default:
			break;
		}
		return jjStartNfa_0(4, active0, active1);
	}

	static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(4, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0, active1);
			return 6;
		}
		switch (curChar) {
		case 65:
			return jjMoveStringLiteralDfa7_0(active0, 0x300000c0000000L, active1, 0L);
		case 73:
			if ((active0 & 0x80000L) != 0L)
				return jjStartNfaWithStates_0(6, 19, 12);
			else if ((active0 & 0x80000000000L) != 0L)
				return jjStartNfaWithStates_0(6, 43, 12);
			else if ((active1 & 0x20L) != 0L)
				return jjStartNfaWithStates_0(6, 69, 12);
			else if ((active1 & 0x2000L) != 0L)
				return jjStartNfaWithStates_0(6, 77, 12);
			else if ((active1 & 0x10000L) != 0L)
				return jjStartNfaWithStates_0(6, 80, 12);
			break;
		case 79:
			if ((active0 & 0x100000L) != 0L)
				return jjStartNfaWithStates_0(6, 20, 12);
			else if ((active0 & 0x100000000000L) != 0L)
				return jjStartNfaWithStates_0(6, 44, 12);
			else if ((active1 & 0x20000L) != 0L)
				return jjStartNfaWithStates_0(6, 81, 12);
			break;
		case 103:
			if ((active1 & 0x80000L) != 0L)
				return jjStartNfaWithStates_0(6, 83, 12);
			break;
		case 108:
			if ((active0 & 0x100000000000000L) != 0L)
				return jjStartNfaWithStates_0(6, 56, 12);
			break;
		default:
			break;
		}
		return jjStartNfa_0(5, active0, active1);
	}

	static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1) {
		if (((active0 &= old0) | (active1 &= old1)) == 0L)
			return jjStartNfa_0(5, old0, old1);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0, 0L);
			return 7;
		}
		switch (curChar) {
		case 73:
			if ((active0 & 0x40000000L) != 0L)
				return jjStartNfaWithStates_0(7, 30, 12);
			else if ((active0 & 0x10000000000000L) != 0L)
				return jjStartNfaWithStates_0(7, 52, 12);
			break;
		case 79:
			if ((active0 & 0x80000000L) != 0L)
				return jjStartNfaWithStates_0(7, 31, 12);
			else if ((active0 & 0x20000000000000L) != 0L)
				return jjStartNfaWithStates_0(7, 53, 12);
			break;
		default:
			break;
		}
		return jjStartNfa_0(6, active0, 0L);
	}

	static private int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

	static private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 28;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 23:
						if ((0x3fe000000000000L & l) != 0L) {
							if (kind > 111)
								kind = 111;
							jjCheckNAdd(26);
						}
						if ((0x3fe000000000000L & l) != 0L)
							jjCheckNAddStates(0, 2);
						break;
					case 6:
						if ((0x3fe000000000000L & l) != 0L) {
							if (kind > 111)
								kind = 111;
							jjCheckNAddStates(3, 6);
						} else if (curChar == 45)
							jjAddStates(7, 8);
						else if (curChar == 48) {
							if (kind > 111)
								kind = 111;
							jjCheckNAddTwoStates(14, 19);
						} else if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 11;
						else if (curChar == 34)
							jjCheckNAddTwoStates(8, 9);
						else if (curChar == 37)
							jjstateSet[jjnewStateCnt++] = 5;
						break;
					case 1:
						if (curChar == 48 && kind > 102)
							kind = 102;
						break;
					case 2:
						if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 3;
						break;
					case 3:
						if ((0x3fe000000000000L & l) == 0L)
							break;
						if (kind > 102)
							kind = 102;
						jjCheckNAdd(4);
						break;
					case 4:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 102)
							kind = 102;
						jjCheckNAdd(4);
						break;
					case 7:
						if (curChar == 34)
							jjCheckNAddTwoStates(8, 9);
						break;
					case 8:
						if ((0xfffffffbffffffffL & l) != 0L)
							jjCheckNAddTwoStates(8, 9);
						break;
					case 9:
						if (curChar == 34 && kind > 103)
							kind = 103;
						break;
					case 10:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 11;
						break;
					case 12:
						if ((0x3ff400000000000L & l) == 0L)
							break;
						if (kind > 104)
							kind = 104;
						jjstateSet[jjnewStateCnt++] = 12;
						break;
					case 13:
						if (curChar != 48)
							break;
						if (kind > 111)
							kind = 111;
						jjCheckNAddTwoStates(14, 19);
						break;
					case 14:
						if (curChar == 46)
							jjCheckNAdd(15);
						break;
					case 15:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 110)
							kind = 110;
						jjCheckNAddTwoStates(15, 16);
						break;
					case 17:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(18);
						break;
					case 18:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 110)
							kind = 110;
						jjCheckNAdd(18);
						break;
					case 20:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(21);
						break;
					case 21:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 110)
							kind = 110;
						jjCheckNAdd(21);
						break;
					case 22:
						if (curChar == 45)
							jjAddStates(7, 8);
						break;
					case 24:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(0, 2);
						break;
					case 25:
						if ((0x3fe000000000000L & l) == 0L)
							break;
						if (kind > 111)
							kind = 111;
						jjCheckNAdd(26);
						break;
					case 26:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 111)
							kind = 111;
						jjCheckNAdd(26);
						break;
					case 27:
						if ((0x3fe000000000000L & l) == 0L)
							break;
						if (kind > 111)
							kind = 111;
						jjCheckNAddStates(3, 6);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 6:
						if ((0x7fffffe07fffffeL & l) != 0L) {
							if (kind > 104)
								kind = 104;
							jjCheckNAdd(12);
						} else if (curChar == 95)
							jjstateSet[jjnewStateCnt++] = 11;
						break;
					case 0:
						if (curChar == 114)
							jjAddStates(9, 11);
						break;
					case 5:
						if (curChar == 118)
							jjstateSet[jjnewStateCnt++] = 0;
						break;
					case 8:
						jjAddStates(12, 13);
						break;
					case 10:
						if (curChar == 95)
							jjstateSet[jjnewStateCnt++] = 11;
						break;
					case 11:
						if ((0x7fffffe07fffffeL & l) == 0L)
							break;
						if (kind > 104)
							kind = 104;
						jjCheckNAdd(12);
						break;
					case 12:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 104)
							kind = 104;
						jjCheckNAdd(12);
						break;
					case 16:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(14, 15);
						break;
					case 19:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(16, 17);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 8:
						if ((jjbitVec0[i2] & l2) != 0L)
							jjAddStates(12, 13);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = { 24, 14, 19, 24, 14, 19, 26, 23, 25, 1, 2, 3, 8, 9, 17, 18, 20, 21, };

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = { "", null, null, null, null, "\141\144\144", "\141\144\144\111",
			"\141\156\144", "\143\62\143", "\143\62\151", "\143\141\154\154", "\143\142\162", "\143\142\162\156\145",
			"\143\142\162\137\114\124", "\143\142\162\137\114\105", "\143\142\162\137\105\121",
			"\143\142\162\137\116\105", "\143\142\162\137\107\124", "\143\142\162\137\107\105",
			"\143\154\157\141\144\101\111", "\143\154\157\141\144\101\117", "\143\154\157\141\144",
			"\143\155\160\137\114\124", "\143\155\160\137\114\105", "\143\155\160\137\105\121",
			"\143\155\160\137\116\105", "\143\155\160\137\107\124", "\143\155\160\137\107\105", "\143\157\155\160",
			"\143\162\145\141\144", "\143\163\164\157\162\145\101\111", "\143\163\164\157\162\145\101\117",
			"\143\163\164\157\162\145", "\143\167\162\151\164\145", "\56\144\141\164\141", "\144\151\166\111",
			"\144\151\166", "\146\62\146", "\146\62\151", "\146\141\144\144", "\146\143\141\154\154",
			"\146\143\157\155\160", "\146\144\151\166", "\146\154\157\141\144\101\111", "\146\154\157\141\144\101\117",
			"\146\154\157\141\144", "\56\146\154\157\141\164", "\146\155\165\154\164", "\56\146\162\141\155\145",
			"\146\162\145\141\144", "\146\162\145\164", "\146\167\162\151\164\145", "\146\163\164\157\162\145\101\111",
			"\146\163\164\157\162\145\101\117", "\146\163\164\157\162\145", "\146\163\165\142",
			"\56\147\154\157\142\141\154", "\151\62\146", "\151\62\151", "\151\143\141\154\154", "\151\162\145\141\144",
			"\151\162\145\164", "\151\167\162\151\164\145", "\152\165\155\160\111", "\152\165\155\160",
			"\154\157\141\144\101\111", "\154\157\141\144\101\117", "\154\157\141\144", "\154\157\141\144\111",
			"\154\163\150\151\146\164\111", "\154\163\150\151\146\164", "\155\157\144", "\155\165\154\164\111",
			"\155\165\154\164", "\156\157\160", "\156\157\164", "\157\162", "\162\163\150\151\146\164\111",
			"\162\163\150\151\146\164", "\162\145\164", "\163\164\157\162\145\101\111", "\163\164\157\162\145\101\117",
			"\163\164\157\162\145", "\56\163\164\162\151\156\147", "\163\165\142\111", "\163\165\142",
			"\163\167\162\151\164\145", "\164\142\154", "\164\145\163\164\145\161", "\164\145\163\164\147\145",
			"\164\145\163\164\147\164", "\164\145\163\164\154\145", "\164\145\163\164\154\164",
			"\164\145\163\164\156\145", "\56\164\145\170\164", "\75\76", "\55\76", "\72", "\73", "\133", "\135", "\54",
			null, null, null, null, null, null, null, null, null, null, null, };

	/** Lexer state names. */
	public static final String[] lexStateNames = { "DEFAULT", };
	static final long[] jjtoToken = { 0xffffffffffffffe1L, 0xc1ffffffffffL, };
	static final long[] jjtoSkip = { 0x1eL, 0x0L, };
	static protected SimpleCharStream input_stream;
	static private final int[] jjrounds = new int[28];
	static private final int[] jjstateSet = new int[56];
	static protected char curChar;

	/** Constructor. */
	public IlocParserTokenManager(SimpleCharStream stream) {
		if (input_stream != null)
			throw new TokenMgrError(
					"ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
					TokenMgrError.STATIC_LEXER_ERROR);
		input_stream = stream;
	}

	/** Constructor. */
	public IlocParserTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	/** Reinitialise parser. */
	static public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	static private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 28; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	/** Reinitialise parser. */
	static public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	static public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	static protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		t.image = curTokenImage;

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	static int curLexState = 0;
	static int defaultLexState = 0;
	static int jjnewStateCnt;
	static int jjround;
	static int jjmatchedPos;
	static int jjmatchedKind;

	/** Get the next Token. */
	public static Token getNextToken() {
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			try {
				input_stream.backup(0);
				while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
					curChar = input_stream.BeginToken();
			} catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

	static private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	static private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	static private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	static private void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

}
